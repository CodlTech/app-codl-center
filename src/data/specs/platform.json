{
  "id": "platform",
  "name": "Platform Chain (P-Chain) API",
  "description": "This API allows clients to interact with the [P-Chain](https://docs.avax.network/learn/platform-overview/#platform-chain-p-chain), which maintains Avalanche’s [validator](https://docs.avax.network/learn/platform-overview/staking#validators) set and handles blockchain creation.\n",
  "methods": [
    {
      "id": "platform.addDelegator",
      "endpoint": "/ext/P",
      "description": "Add a delegator to the Primary Network.\n\nA delegator stakes AVAX and specifies a validator (the delegatee) to validate on their behalf. The delegatee has an increased probability of being sampled by other validators (weight) in proportion to the stake delegated to them. The delegatee charges a fee to the delegator; the former receives a percentage of the delegator’s validation reward (if any.) A transaction that delegates stake has no fee.\n\nThe delegation period must be a subset of the period that the delegatee validates the Primary Network.\n\nNote that once you issue the transaction to add a node as a delegator, there is no way to change the parameters. **You can’t remove a stake early or change the stake amount, node ID, or reward address.** Please make sure you’re using the correct values. If you’re not sure, check out our [Developer FAQ](https://support.avalabs.org/en/collections/2618154-developer-faq) or ask for help on [Discord.](https://chat.avalabs.org/)\n\n_Related documentation: [Staking](https://docs.avax.network/learn/platform-overview/staking)_",
      "signature": "platform.addDelegator({\n    nodeID: string,\n    startTime: int,\n    endTime: int,\n    stakeAmount: int,\n    rewardAddress: string,\n    from: []string, (optional)\n    changeAddr: string, (optional)\n    username: string,\n    password: string\n}) -> {\n    txID: string,\n    changeAddr: string\n}",
      "formals": {
        "nodeID": "string",
        "startTime": "int",
        "endTime": "int",
        "stakeAmount": "int",
        "rewardAddress": "string",
        "from": "?[]string",
        "changeAddr": "?string",
        "username": "string",
        "password": "string"
      },
      "returns": {
        "txID": "string",
        "changeAddr": "string"
      },
      "example": {
        "nodeID": "NodeID-MFrZFVCXPv5iCn6M9K6XduxGTYp891xXZ",
        "rewardAddress": "P-avax1gss39m5sx6jn7wlyzeqzm086yfq2l02xkvmecy",
        "startTime": 1594102400,
        "endTime": 1604102400,
        "stakeAmount": 100000,
        "from": ["P-avax1gss39m5sx6jn7wlyzeqzm086yfq2l02xkvmecy"],
        "changeAddr": "P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",
        "username": "username",
        "password": "password"
      },
      "notes": [
        "`nodeID` is the node ID of the delegatee.",
        "`startTime` is the Unix time when the delegator starts delegating.",
        "`endTime` is the Unix time when the delegator stops delegating (and staked AVAX is returned).",
        "`stakeAmount` is the amount of nAVAX the delegator is staking.",
        "`rewardAddress` is the address the validator reward goes to, if there is one.",
        "`from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.",
        "`changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.",
        "`username` is the user that pays the transaction fee.",
        "`password` is `username`‘s password.",
        "`txID` is the transaction ID"
      ]
    },
    {
      "id": "platform.addValidator",
      "endpoint": "/ext/P",
      "description": "Add a validator to the Primary Network. You must stake AVAX to do this. If the node is sufficiently correct and responsive while validating, you receive a reward when they are done validating. The validator’s probability of being sampled by other validators during consensus is in proportion to the amount of AVAX staked.\n\nThe validator can charge a fee to delegators; the former receives a percentage of the delegator’s validation reward (if any.) The minimum delegation fee is 2%. A transaction that adds a validator has no fee.\n\nThe validation period must be between 2 weeks and 1 year.\n\nThere is a maximum total weight imposed on validators. This means that no validator will ever have more AVAX staked and delegated to it than this value. This value will initially be set to `min(5 * amount staked, 3M AVAX)`. The total value on a validator is 3 million AVAX.\n\nNote that once you issue the transaction to add a node as a validator, there is no way to change the parameters. **You can’t remove stake early or change the stake amount, node ID, or reward address.** Please make sure you’re using the correct values. If you’re not sure, check out our [Developer FAQ](https://support.avalabs.org/en/collections/2618154-developer-faq) or ask for help on [Discord.](https://chat.avalabs.org/)\n\n_Related documentation: [Staking](https://docs.avax.network/learn/platform-overview/staking)_",
      "signature": "platform.addValidator({\n    nodeID: string,\n    startTime: int,\n    endTime: int,\n    stakeAmount: int,\n    rewardAddress: string,\n    from: []string, (optional)\n    changeAddr: string, (optional)\n    delegationFeeRate: float,\n    username: string,\n    password: string\n}) -> {\n    txID: string,\n    changeAddr: string\n}",
      "formals": {
        "nodeID": "string",
        "startTime": "int",
        "endTime": "int",
        "stakeAmount": "int",
        "rewardAddress": "string",
        "from": "?[]string",
        "changeAddr": "?string",
        "delegationFeeRate": "float",
        "username": "string",
        "password": "string"
      },
      "returns": {
        "txID": "string",
        "changeAddr": "string"
      },
      "example": {
        "nodeID": "NodeID-ARCLrphAHZ28xZEBfUL7SVAmzkTZNe1LK",
        "rewardAddress": "P-avax1gss39m5sx6jn7wlyzeqzm086yfq2l02xkvmecy",
        "from": ["P-avax1gss39m5sx6jn7wlyzeqzm086yfq2l02xkvmecy"],
        "changeAddr": "P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",
        "startTime": "%date",
        "endTime": "%date",
        "stakeAmount": 1000000,
        "delegationFeeRate": 10,
        "username": "username",
        "password": "password"
      },
      "notes": [
        "`nodeID` is the node ID of the validator being added.",
        "`startTime` is the Unix time when the validator starts validating the Primary Network.",
        "`endTime` is the Unix time when the validator stops validating the Primary Network (and staked AVAX is returned).",
        "`stakeAmount` is the amount of nAVAX the validator is staking.",
        "`rewardAddress` is the address the validator reward will go to, if there is one.",
        "`from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.",
        "`changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.",
        "`delegationFeeRate` is the percent fee this validator charges when others delegate stake to them. Up to 4 decimal places allowed; additional decimal places are ignored. Must be between 0 and 100, inclusive. For example, if `delegationFeeRate` is `1.2345` and someone delegates to this validator, then when the delegation period is over, 1.2345% of the reward goes to the validator and the rest goes to the delegator.",
        "`username` is the user that pays the transaction fee.",
        "`password` is `username`‘s password.",
        "`txID` is the transaction ID"
      ]
    },
    {
      "id": "platform.addSubnetValidator",
      "endpoint": "/ext/P",
      "description": "Add a validator to a subnet other than the Primary Network. The Validator must validate the Primary Network for the entire duration they validate this subnet.",
      "signature": "platform.addSubnetValidator({\n    nodeID: string,\n    subnetID: string,\n    startTime: int,\n    endTime: int,\n    weight: int,\n    from: []string, (optional)\n    changeAddr: string, (optional)\n    username: string,\n    password: string\n}) -> {\n    txID: string,\n    changeAddr: string\n}",
      "formals": {
        "nodeID": "string",
        "subnetID": "string",
        "startTime": "int",
        "endTime": "int",
        "weight": "int",
        "from": "?[]string",
        "changeAddr": "?string",
        "username": "string",
        "password": "string"
      },
      "returns": {
        "txID": "string",
        "changeAddr": "string"
      },
      "example": {
        "nodeID": "NodeID-7xhw2mdxuds44j42tcb6u5579esbst3lg",
        "subnetID": "zbfoww1ffkpvrfywpj1cvqrfnyesepdfc61hmu2n9jnghduel",
        "startTime": 1583524047,
        "endTime": 1604102399,
        "weight": 1,
        "from": ["P-avax1gss39m5sx6jn7wlyzeqzm086yfq2l02xkvmecy"],
        "changeAddr": "P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",
        "username": "username",
        "password": "password"
      },
      "notes": [
        "`nodeID` is the node ID of the validator.",
        "`subnetID` is the subnet they will validate.",
        "`startTime` is the unix time when the validator starts validating the subnet.",
        "`endTime` is the unix time when the validator stops validating the subnet.",
        "`weight` is the validator’s weight used for sampling.",
        "`from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.",
        "`changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.",
        "`username` is the user that pays the transaction fee.",
        "`password` is `username`‘s password.",
        "`txID` is the transaction ID."
      ]
    },
    {
      "id": "platform.createAddress",
      "endpoint": "/ext/bc/P",
      "description": "Create a new address controlled by the given user.",
      "signature": "platform.createAddress({\n    username: string,\n    password: string\n}) -> {\n    address: string\n}",
      "formals": {
        "username": "string",
        "password": "string"
      },
      "returns": {
        "address": "string"
      },
      "example": {
        "username": "myUsername",
        "password": "myPassword"
      }
    },
    {
      "id": "platform.createBlockchain",
      "endpoint": "/ext/P",
      "description": "Create a new blockchain. Currently only supports the creation of new instances of the AVM and the Timestamp VM.",
      "signature": "platform.createBlockchain({\n    subnetID: string,\n    vmID: string,\n    name: string,\n    genesisData: string,\n    encoding: string, (optional)\n    from: []string, (optional)\n    changeAddr: string, (optional)\n    username: string,\n    password: string\n}) -> {\n    txID: string,\n    changeAddr: string\n}",
      "formals": {
        "subnetID": "string",
        "vmID": "string",
        "name": "string",
        "genesisData": "string",
        "encoding": "?string",
        "from": "?[]string",
        "changeAddr": "?string",
        "username": "string",
        "password": "string"
      },
      "returns": {
        "txID": "string",
        "changeAddr": "string"
      },
      "example": {
        "vmID": "timestamp",
        "subnetID": "2bRCr6B4MiEfSjidDwxDpdCyviwnfUVqB2HGwhm947w9YYqb7r",
        "name": "My new timestamp",
        "genesisData": "45oj4CqFViNHUtBxJ55TZfqaVAXFwMRMj2XkHVqUYjJYoTaEM",
        "encoding": "cb58",
        "from": ["P-avax1gss39m5sx6jn7wlyzeqzm086yfq2l02xkvmecy"],
        "changeAddr": "P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",
        "username": "username",
        "password": "password"
      },
      "notes": [
        "`subnetID` is the ID of the Subnet that validates the new blockchain. The Subnet must exist and can’t be the Primary Network.",
        "`vmID` is the ID of the Virtual Machine the blockchain runs. Can also be an alias of the Virtual Machine.",
        "`name` is a human-readable name for the new blockchain. Not necessarily unique.",
        "`genesisData` is the byte representation of the genesis state of the new blockchain encoded in the format specified by the `encoding` parameter.",
        "`encoding` specifies the format to use for `genesisData`. Can be either “cb58” or “hex”. Defaults to “cb58”. Virtual Machines should have a static API method named `buildGenesis` that can be used to generate `genesisData`",
        "`from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.",
        "`changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.",
        "`username` is the user that pays the transaction fee. This user must have a sufficient number of the subnet’s control keys.",
        "`password` is `username`‘s password.",
        "`txID` is the transaction ID."
      ]
    },
    {
      "id": "platform.createSubnet",
      "endpoint": "/ext/P",
      "description": "Create a new subnet.\n\nThe subnet’s ID is the same as this transaction’s ID.",
      "signature": "platform.createSubnet({\n    controlKeys: []string,\n    threshold: int,\n    from: []string, (optional)\n    changeAddr: string, (optional)\n    username: string,\n    password: string\n}) -> {\n    txID: string,\n    changeAddr: string\n}",
      "formals": {
        "controlKeys": "[]string",
        "threshold": "int",
        "from": "?[]string",
        "changeAddr": "?string",
        "username": "string",
        "password": "string"
      },
      "returns": {
        "txID": "string",
        "changeAddr": "string"
      },
      "example": {
        "controlKeys": [
          "P-avax13xqjvp8r2entvw5m29jxxjhmp3hh6lz8laep9m",
          "P-avax165mp4efnel8rkdeqe5ztggspmw4v40j7pfjlhu"
        ],
        "threshold": 2,
        "from": ["P-avax1gss39m5sx6jn7wlyzeqzm086yfq2l02xkvmecy"],
        "changeAddr": "P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",
        "username": "username",
        "password": "password"
      },
      "notes": [
        "In order to add a validator to this subnet, `threshold` signatures are required from the addresses in `controlKeys`",
        "`from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.",
        "`changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.",
        "`username` is the user that pays the transaction fee.",
        "`password` is `username`‘s password."
      ]
    },
    {
      "id": "platform.exportAVAX",
      "endpoint": "/ext/P",
      "description": "Send AVAX from an address on the P-Chain to an address on the X-Chain. After issuing this transaction, you must call the X-Chain’s [`avm.importAVAX`](exchange-chain-x-chain-api#avm-importavax) method to complete the transfer.",
      "signature": "platform.exportAVAX({\n    amount: int,\n    from: []string, (optional)\n    to: string,\n    changeAddr: string, (optional)\n    username: string,\n    password: string\n}) -> {\n    txID: string,\n    changeAddr: string\n}",
      "formals": {
        "amount": "int",
        "from": "?[]string",
        "to": "string",
        "changeAddr": "?string",
        "username": "string",
        "password": "string"
      },
      "returns": {
        "txID": "string",
        "changeAddr": "string"
      },
      "example": {
        "to": "X-avax1yv8cwj9kq3527feemtmh5gkvezna5xys08mxet",
        "amount": 1,
        "from": ["P-avax1gss39m5sx6jn7wlyzeqzm086yfq2l02xkvmecy"],
        "changeAddr": "P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",
        "username": "username",
        "password": "password"
      },
      "notes": [
        "`amount` is the amount of nAVAX to send.",
        "`to` is the address on the X-Chain to send the AVAX to",
        "`from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.",
        "`changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.",
        "`username` is the user sending the AVAX and paying the transaction fee.",
        "`password` is `username`‘s password.",
        "`txID` is the ID of this transaction."
      ]
    },
    {
      "id": "platform.exportKey",
      "endpoint": "/ext/P",
      "description": "Get the private key that controls a given address.   The returned private key can be added to a user with [`platform.importKey`](#platform-importkey).",
      "signature": "platform.exportKey({\n    username: string,\n    password: string,\n    address: string\n}) -> {\n    privateKey: string\n}",
      "formals": {
        "username": "string",
        "password": "string",
        "address": "string"
      },
      "returns": {
        "privateKey": "string"
      },
      "example": {
        "username": "username",
        "password": "password",
        "address": "P-avax1zwp96clwehpwm57r9ftzdm7rnuslrunj68ua3r"
      },
      "notes": [
        "`username` is the user that controls `address`.",
        "`password` is `username`‘s password.",
        "`privateKey` is the string representation of the private key that controls `address`."
      ]
    },
    {
      "id": "platform.getBalance",
      "endpoint": "/ext/bc/P",
      "description": "Get the balance of AVAX controlled by a given address.",
      "signature": "platform.getBalance({\n    address: string\n}) -> {\n    balance: string,\n    unlocked: string,\n    lockedStakeable: string,\n    lockedNotStakeable: string,\n    utxoIDs: []{\n        txID: string,\n        outputIndex: int\n    }\n}",
      "formals": {
        "address": "string"
      },
      "returns": {
        "balance": "string",
        "unlocked": "string",
        "lockedStakeable": "string",
        "lockedNotStakeable": "string",
        "utxoIDs": "[]object"
      },
      "example": {
        "address": "P-avax1m8wnvtqvthsxxlrrsu3f43kf9wgch5tyfx4nmf"
      },
      "notes": [
        "`address` is the address to get the balance of.",
        "`balance` is the total balance, in nAVAX.",
        "`unlocked` is the unlocked balance, in nAVAX.",
        "`lockedStakeable` is the locked stackeable balance, in nAVAX.",
        "`lockedNotStakeable` is the locked and not stackeable balance, in nAVAX.",
        "`utxoIDs` are the IDs of the UTXOs that reference `address`."
      ]
    },
    {
      "id": "platform.getBlockchains",
      "endpoint": "/ext/P",
      "description": "Get all the blockchains that exist (excluding the P-Chain).",
      "signature": "platform.getBlockchains() -> {\n    blockchains: []{\n        id: string,\n        name: string,\n        subnetID: string,\n        vmID: string\n    }\n}",
      "returns": {
        "blockchains": "[]object"
      },
      "example": {},
      "notes": [
        "`blockchains` is all of the blockchains that exists on the Avalanche network.",
        "`name` is the human-readable name of this blockchain.",
        "`id` is the blockchain’s ID.",
        "`subnetID` is the ID of the Subnet that validates this blockchain.",
        "`vmID` is the ID of the Virtual Machine the blockchain runs."
      ]
    },
    {
      "id": "platform.getBlockchainStatus",
      "endpoint": "/ext/P",
      "description": "Get the status of a blockchain.",
      "signature": "platform.getBlockchainStatus({\n    blockchainID: string\n}) -> {\n    status: string\n}",
      "formals": {
        "blockchainID": "string"
      },
      "returns": {
        "status": "string"
      },
      "example": {
        "blockchainID": "2NbS4dwGaf2p1MaXb65PrkZdXRwmSX4ZzGnUu7jm3aykgThuZE"
      },
      "notes": [
        "`Validating`: The blockchain is being validated by this node.",
        "`Created`: The blockchain exists but isn’t being validated by this node.",
        "`Preferred`: The blockchain was proposed to be created and is likely to be created but the transaction isn’t yet accepted.",
        "`Unknown`: The blockchain either wasn’t proposed or the proposal to create it isn’t preferred. The proposal may be resubmitted."
      ]
    },
    {
      "id": "platform.getCurrentSupply",
      "endpoint": "/ext/P",
      "description": "Returns an upper bound on the number of AVAX that exist. This is an upper bound because it does not account for burnt tokens, including transaction fees.",
      "signature": "platform.getCurrentSupply() -> {\n    supply: int\n}",
      "returns": {
        "supply": "int"
      },
      "example": {},
      "notes": [
        "`supply` is an upper bound on the number of AVAX that exist, denominated in nAVAX."
      ]
    },
    {
      "id": "platform.getCurrentValidators",
      "endpoint": "/ext/P",
      "description": "List the current validators of the given Subnet.\n\nThe top level field `delegators` is deprecated as of v1.0.1. If you are using it, you should stop using it. Instead, each element of `validators` now contains the list of delegators for that validator. You should get information about delegators this way going forward.",
      "signature": "platform.getCurrentValidators({\n    subnetID: string (optional)\n}) -> {\n    validators: []{\n        startTime: string,\n        endTime: string,\n        stakeAmount: string, (optional)\n        nodeID: string,\n        weight: string, (optional)\n        rewardOwner: {\n            locktime: string,\n            threshold: string,\n            addresses: string[]\n        },\n        potentialReward: string,\n        delegationFee: string,\n        uptime: string,\n        connected: bool,\n        delegators: []{\n            startTime: string,\n            endTime: string,\n            stakeAmount: string, (optional)\n            nodeID: string,\n            rewardOwner: {\n                locktime: string,\n                threshold: string,\n                addresses: string[]\n            },\n            potentialReward: string\n        }\n    },\n    delegators: []{\n        startTime: string,\n        endTime: string,\n        stakeAmount: string, (optional)\n        nodeID: string,\n        rewardOwner: {\n            locktime: string,\n            threshold: string,\n            addresses: string[]\n        },\n        potentialReward: string\n    }\n}",
      "formals": {
        "subnetID": "?string"
      },
      "example": {},
      "notes": [
        "`subnetID` is the subnet whose current validators are returned. If omitted, returns the current validators of the Primary Network.",
        "`validators`:",
        "`startTime` is the Unix time when the validator starts validating the Subnet.",
        "`endTime` is the Unix time when the validator stops validating the Subnet.",
        "`stakeAmount` is the amount of nAVAX this validator staked. Omitted if `subnetID` is not the Primary Network.",
        "`nodeID` is the validator’s node ID.",
        "`weight` is the validator’s weight when sampling validators. Omitted if `subnetID` is the Primary Network.",
        "`rewardOwner` is an `OutputOwners` output which includes `locktime`, `threshold` and array of `addresses`.",
        "`potentialReward` is the potential reward earned from staking",
        "`delegationFeeRate` is the percent fee this validator charges when others delegate stake to them.",
        "`uptime` is the % of time the queried node has reported the peer as online.",
        "`connected` is if the node is connected to the network",
        "`delegators` is the list of delegators to this validator.",
        "`delegators`: (**deprecated as of v1.0.1. See note at top of method documentation.**)",
        "`startTime` is the Unix time when the delegator started.",
        "`endTime` is the Unix time when the delegator stops.",
        "`stakeAmount` is the amount of nAVAX this delegator staked. Omitted if `subnetID` is not the Primary Network.",
        "`nodeID` is the validating node’s node ID.",
        "`rewardOwner` is an `OutputOwners` output which includes `locktime`, `threshold` and array of `addresses`.",
        "`potentialReward` is the potential reward earned from staking"
      ]
    },
    {
      "id": "platform.getHeight",
      "endpoint": "/ext/P",
      "description": "Returns the height of the last accepted block.",
      "signature": "platform.getHeight() -> {\n    height: int\n}",
      "returns": {
        "height": "int"
      },
      "example": {}
    },
    {
      "id": "platform.getMinStake",
      "endpoint": "/ext/P",
      "description": "Get the minimum amount of AVAX required to validate the Primary Network and the minimum amount of AVAX that can be delegated.",
      "signature": "platform.getMinStake() -> {\n    minValidatorStake : uint64,\n    minDelegatorStake : uint64\n}",
      "returns": {
        "minValidatorStake": "uint64",
        "minDelegatorStake": "uint64"
      }
    },
    {
      "id": "platform.getPendingValidators",
      "endpoint": "/ext/P",
      "description": "List the validators in the pending validator set of the specified Subnet. Each validator is not currently validating the Subnet but will in the future.",
      "signature": "platform.getPendingValidators({\n    subnetID: string (optional)\n}) -> {\n    validators: []{\n        startTime: string,\n        endTime: string,\n        stakeAmount: string, (optional)\n        nodeID: string,\n        delegationFee: string,\n        connected: bool,\n        weight: string (optional)\n    },\n    delegators: []{\n        startTime: string,\n        endTime: string,\n        stakeAmount: string,\n        nodeID: string\n    }\n}",
      "formals": {
        "subnetID": "?string"
      },
      "returns": {
        "validators": "[]object",
        "delegators": "[]object"
      },
      "example": {},
      "notes": [
        "`subnetID` is the subnet whose current validators are returned. If omitted, returns the current validators of the Primary Network.",
        "`validators`:",
        "`startTime` is the Unix time when the validator starts validating the Subnet.",
        "`endTime` is the Unix time when the validator stops validating the Subnet.",
        "`stakeAmount` is the amount of nAVAX this validator staked. Omitted if `subnetID` is not the Primary Network.",
        "`nodeID` is the validator’s node ID.",
        "`connected` if the node is connected.",
        "`weight` is the validator’s weight when sampling validators. Omitted if `subnetID` is the Primary Network.",
        "`delegators`:",
        "`startTime` is the Unix time when the delegator starts.",
        "`endTime` is the Unix time when the delegator stops.",
        "`stakeAmount` is the amount of nAVAX this delegator staked. Omitted if `subnetID` is not the Primary Network.",
        "`nodeID` is the validating node’s node ID."
      ]
    },
    {
      "id": "platform.getStakingAssetID",
      "endpoint": "/ext/P",
      "description": "Retrieve an assetID for a subnet’s staking asset. Currently, this always returns the Primary Network’s staking assetID.",
      "signature": "platform.getStakingAssetID() -> {\n    assetID: string\n}",
      "returns": {
        "assetID": "string"
      },
      "example": {}
    },
    {
      "id": "platform.getSubnets",
      "endpoint": "/ext/P",
      "description": "Get all the Subnets that exist.",
      "signature": "platform.getSubnets({\n    ids: []string\n}) -> {\n    subnets: []{\n        id: string,\n        controlKeys: []string,\n        threshold: string\n    }\n}",
      "formals": {
        "ids": "[]string"
      },
      "returns": {
        "subnets": "[]object"
      },
      "example": {
        "ids": ["hW8Ma7dLMA7o4xmJf3AXBbo17bXzE7xnThUd3ypM4VAWo1sNJ"]
      }
    },
    {
      "id": "platform.getStake",
      "endpoint": "/ext/P",
      "description": "Get the amount of nAVAX staked by a set of addresses. The amount returned does not include staking rewards.",
      "signature": "platform.getStake({\n    addresses: []string\n}) -> {\n    stake: int\n}",
      "formals": {
        "addresses": "[]string"
      },
      "returns": {
        "stake": "int"
      },
      "example": {
        "addresses": [
          "P-everest1g3ea9z5kmkzwnxp8vr8rpjh6lqw4r0ufec460d",
          "P-everest12un03rm579fewele99c4v53qnmymwu46dv3s5v"
        ]
      }
    },
    {
      "id": "platform.getTotalStake",
      "endpoint": "/ext/P",
      "description": "Get the total amount of nAVAX staked on the Primary Network.",
      "signature": "platform.getTotalStake() -> {\n    stake: int\n}",
      "returns": {
        "stake": "int"
      },
      "example": {}
    },
    {
      "id": "platform.getTx",
      "endpoint": "/ext/P",
      "description": "Gets a transaction by its ID.\n\nOptional `encoding` parameter to specify the format for the returned transaction. Can be either “cb58” or “hex”. Defaults to “cb58”.",
      "signature": "platform.getTx({\n    txID: string,\n    encoding: string (optional)\n}) -> {\n    tx: string,\n    encoding: string\n})",
      "formals": {
        "txID": "string",
        "encoding": "?string"
      },
      "returns": {
        "tx": "string",
        "encoding": "string"
      },
      "example": {
        "txID": "TAG9Ns1sa723mZy1GSoGqWipK6Mvpaj7CAswVJGM6MkVJDF9Q",
        "encoding": "cb58"
      }
    },
    {
      "id": "platform.getTxStatus",
      "endpoint": "/ext/P",
      "description": "Gets a transaction’s status by its ID.",
      "signature": "platform.getTxStatus({\n    txID: string\n}) -> {\n    status: string\n}",
      "formals": {
        "txID": "string"
      },
      "returns": {
        "status": "string"
      },
      "example": {
        "txID": "TAG9Ns1sa723mZy1GSoGqWipK6Mvpaj7CAswVJGM6MkVJDF9Q"
      }
    },
    {
      "id": "platform.getUTXOs",
      "endpoint": "/ext/bc/P",
      "description": "Gets the UTXOs that reference a given set of addresses.",
      "signature": "platform.getUTXOs({\n    addresses: string,\n    limit: int, (optional)\n    startIndex: { (optional)\n        address: string,\n        utxo: string\n    },\n    sourceChain: string, (optional)\n    encoding: string (optional)\n}) -> {\n    numFetched: int,\n    utxos: []string,\n    endIndex: {\n        address: string,\n        utxo: string\n    },\n    encoding: string\n}",
      "formals": {
        "addresses": "string",
        "limit": "?int",
        "startIndex": "?object",
        "sourceChain": "?string",
        "encoding": "?string"
      },
      "returns": {
        "numFetched": "int",
        "utxos": "[]string",
        "endIndex": "object",
        "encoding": "string"
      },
      "example": {
        "addresses": [
          "P-avax1s994jad0rtwvlfpkpyg2yau9nxt60qqfv023qx",
          "P-avax1fquvrjkj7ma5srtayfvx7kncu7um3ym73ztydr"
        ],
        "limit": 5,
        "encoding": "cb58"
      },
      "notes": [
        "`utxos` is a list of UTXOs such that each UTXO references at least one address in `addresses`.",
        "At most `limit` UTXOs are returned. If `limit` is omitted or greater than 1024, it is set to 1024.",
        "This method supports pagination. `endIndex` denotes the last UTXO returned. To get the next set of UTXOs, use the value of `endIndex` as `startIndex` in the next call.",
        "If `startIndex` is omitted, will fetch all UTXOs up to `limit`.",
        "When using pagination (ie when `startIndex` is provided), UTXOs are not guaranteed to be unique across multiple calls. That is, a UTXO may appear in the result of the first call, and then again in the second call.",
        "When using pagination, consistency is not guaranteed across multiple calls. That is, the UTXO set of the addresses may have changed between calls.",
        "`encoding` specifies the format for the returned UTXOs. Can be either “cb58” or “hex” and defaults to “cb58”."
      ]
    },
    {
      "id": "platform.importAVAX",
      "endpoint": "/ext/P",
      "description": "Complete a transfer of AVAX from the X-Chain to the P-Chain.\n\nBefore this method is called, you must call the X-Chain’s [`avm.exportAVAX`](exchange-chain-x-chain-api#avm-exportavax) method to initiate the transfer.",
      "signature": "platform.importAVAX({\n    from: []string, (optional)\n    to: string,\n    changeAddr: string, (optional)\n    sourceChain: string,\n    username: string,\n    password: string\n}) -> {\n    tx: string,\n    changeAddr: string\n}",
      "formals": {
        "from": "?[]string",
        "to": "string",
        "changeAddr": "?string",
        "sourceChain": "string",
        "username": "string",
        "password": "string"
      },
      "returns": {
        "tx": "string",
        "changeAddr": "string"
      },
      "example": {
        "sourceChain": "X",
        "to": "P-avax1apzq2zt0uaaatum3wdz83u4z7dv4st7l5m5n2a",
        "from": ["P-avax1gss39m5sx6jn7wlyzeqzm086yfq2l02xkvmecy"],
        "changeAddr": "P-avax103y30cxeulkjfe3kwfnpt432ylmnxux8r73r8u",
        "username": "bob",
        "password": "loblaw"
      },
      "notes": [
        "`to` is the ID of the address the AVAX is imported to. This must be the same as the `to` argument in the corresponding call to the X-Chain’s `exportAVAX`.",
        "`sourceChain` is the ID or alias of the chain the AVAX is being imported from. To import funds from the X-Chain, use `\"X\"`.",
        "`from` are the addresses that you want to use for this operation. If omitted, uses any of your addresses as needed.",
        "`changeAddr` is the address any change will be sent to. If omitted, change is sent to one of the addresses controlled by the user.",
        "`username` is the user that controls the address specified in `to`.",
        "`password` is `username`‘s password."
      ]
    },
    {
      "id": "platform.importKey",
      "endpoint": "/ext/P",
      "description": "Give a user control over an address by providing the private key that controls the address.",
      "signature": "platform.importKey({\n    username: string,\n    password: string,\n    privateKey: string\n}) -> {\n    address: string\n}",
      "formals": {
        "username": "string",
        "password": "string",
        "privateKey": "string"
      },
      "returns": {
        "address": "string"
      },
      "example": {
        "username": "bob",
        "password": "loblaw",
        "privateKey": "PrivateKey-2w4XiXxPfQK4TypYqnohRL8DRNTz9cGiGmwQ1zmgEqD9c9KWLq"
      },
      "notes": [
        "Add `privateKey` to `username`‘s set of private keys. `address` is the address `username` now controls with the private key."
      ]
    },
    {
      "id": "platform.issueTx",
      "endpoint": "/ext/P",
      "description": "Issue a transaction to the Platform Chain.",
      "signature": "platform.issueTx({\n    tx: string,\n    encoding: string (optional)\n}) -> {\n    txID: string\n}",
      "formals": {
        "tx": "string",
        "encoding": "?string"
      },
      "returns": {
        "txID": "string"
      },
      "example": {
        "tx": "111Bit5JNASbJyTLrd2kWkYRoc96swEWoWdmEhuGAFK3rCAyTnTzomuFwgx1SCUdUE71KbtXPnqj93KGr3CeftpPN37kVyqBaAQ5xaDjr7wVBTUYi9iV7kYJnHF61yovViJF74mJJy7WWQKeRMDRTiPuii5gsd11gtNahCCsKbm9seJtk2h1wAPZn9M1eL84CGVPnLUiLP",
        "encoding": "cb58"
      },
      "notes": [
        "`tx` is the byte representation of a transaction.",
        "`encoding` specifies the encoding format for the transaction bytes. Can be either “cb58” or “hex”. Defaults to “cb58”.",
        "`txID` is the transaction’s ID."
      ]
    },
    {
      "id": "platform.listAddresses",
      "endpoint": "/ext/bc/P",
      "description": "List addresses controlled by the given user.",
      "signature": "platform.listAddresses({\n    username: string,\n    password: string\n}) -> {\n    addresses: []string\n}",
      "formals": {
        "username": "string",
        "password": "string"
      },
      "returns": {
        "addresses": "[]string"
      },
      "example": {
        "username": "myUsername",
        "password": "myPassword"
      }
    },
    {
      "id": "platform.sampleValidators",
      "endpoint": "/ext/P",
      "description": "Sample validators from the specified Subnet.",
      "signature": "platform.sampleValidators({\n    size: int,\n    subnetID: string (optional)\n}) -> {\n    validators: [size]string\n}",
      "formals": {
        "size": "int",
        "subnetID": "?string"
      },
      "returns": {
        "validators": "[]string"
      },
      "example": {
        "size": 2
      },
      "notes": [
        "`size` is the number of validators to sample.",
        "`subnetID` is the Subnet to sampled from. If omitted, defaults to the Primary Network.",
        "Each element of `validators` is the ID of a validator."
      ]
    },
    {
      "id": "platform.validatedBy",
      "endpoint": "/ext/P",
      "description": "Get the Subnet that validates a given blockchain.",
      "signature": "platform.validatedBy({\n    blockchainID: string\n}) -> {\n    subnetID: string\n}",
      "formals": {
        "blockchainID": "string"
      },
      "returns": {
        "subnetID": "string"
      },
      "example": {
        "blockchainID": "KDYHHKjM4yTJTT8H8qPs5KXzE6gQH5TZrmP1qVr1P6qECj3XN"
      },
      "notes": [
        "`blockchainID` is the blockchain’s ID.",
        "`subnetID` is the ID of the Subnet that validates the blockchain."
      ]
    },
    {
      "id": "platform.validates",
      "endpoint": "/ext/P",
      "description": "Get the IDs of the blockchains a Subnet validates.",
      "signature": "platform.validates({\n    subnetID: string\n}) -> {\n    blockchainIDs: []string\n}",
      "formals": {
        "subnetID": "string"
      },
      "returns": {
        "blockchainIDs": "[]string"
      },
      "example": {
        "subnetID": "2bRCr6B4MiEfSjidDwxDpdCyviwnfUVqB2HGwhm947w9YYqb7r"
      },
      "notes": [
        "`subnetID` is the Subnet’s ID.",
        "Each element of `blockchainIDs` is the ID of a blockchain the Subnet validates."
      ]
    }
  ]
}
