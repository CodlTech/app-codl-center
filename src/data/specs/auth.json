{
  "id": "auth",
  "name": "Authorization (Auth) API",
  "description": "When you run a node, you can require that API calls have an authorization token attached.\nThis API manages the creation and revocation of authorization tokens.\n\nAn authorization token provides access to one or more API endpoints.\nThis is is useful for delegating access to a node's APIs.\nTokens expire after 12 hours.\n\nAn authorization token is provided in the header of an API call.\nSpecifically, the header `Authorization` should have value `Bearer TOKEN.GOES.HERE` (where `TOKEN.GOES.HERE` is replaced with the token, of course.)\n\nThis API is only reachable if the node is started with [command-line argument](https://docs.avax.network/build/references/command-line-interface) `--api-auth-required`.\nIf the node is started without this CLI, API calls do not require authorization tokens, so this API is not reachable.\nThis API never requires an authorization token to be reached.\n\nOf course, authorization token creation must be permissioned.\nIf you run your node with `--api-auth-required`, you must also specify an authorization token password with argument `--api-auth-password`.\nYou must provide this password in order to create/revoke authorization tokens.\n\nNote that if you run your node with `--api-auth-required` then some tools like Metamask may not be able to make API calls to your node \nbecause they don't have an auth token.\n",
  "methods": [
    {
      "id": "auth.newToken",
      "endpoint": "/ext/auth",
      "description": "Creates a new authorization token that grants access to one or more API endpoints.",
      "signature": "auth.newToken({\n    password: string,\n    endpoints: []string\n}) -> {\n    token: string\n}",
      "formals": {
        "password": "string",
        "endpoints": "[]string"
      },
      "returns": {
        "token": "string"
      },
      "example": {
        "password": "YOUR PASSWORD GOES HERE",
        "endpoints": ["/ext/bc/X", "/ext/info"]
      },
      "notes": [
        "`password` is this node's authorization token password.",
        "`endpoints` is a list of endpoints that will be accessible using the generated token. If `endpoints` contains an element `\"*\"`, the generated token can access any API endpoint.",
        "`token` is the authorization token."
      ]
    },
    {
      "id": "auth.revokeToken",
      "endpoint": "/ext/auth",
      "description": "Revoke a previously generated token. The given token will no longer grant access to any endpoint. If the token is invalid, does nothing.",
      "signature": "auth.revokeToken({\n    password: string,\n    token: string\n}) -> {\n    success: bool\n}",
      "formals": {
        "password": "string",
        "token": "string"
      },
      "returns": {
        "success": "bool"
      },
      "example": {
        "password": "123",
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1OTMxNzIzMjh9.qZVNhH6AMQ_LpbXnPbTFEL6Vm5EM5FLU-VEKpYBH3k4"
      },
      "notes": [
        "`password` is this node's authorization token password.",
        "`token` is the authorization token being revoked."
      ]
    },
    {
      "id": "auth.changePassword",
      "endpoint": "/ext/auth",
      "description": "Change this node's authorization token password. Any authorization tokens created under an old password will become invalid.",
      "signature": "auth.changePassword({\n    oldPassword: string,\n    newPassword: string\n}) -> {\n    success: bool\n}",
      "formals": {
        "oldPassword": "string",
        "newPassword": "string"
      },
      "returns": {
        "success": "bool"
      },
      "example": {
        "oldPassword": "OLD PASSWORD HERE",
        "newPassword": "NEW PASSWORD HERE"
      },
      "notes": [
        "`oldPassword` is this node's current authorization token password.",
        "`newPassword` is the node's new authorization token password after this API call. Must be between 1 and 1024 characters."
      ]
    }
  ]
}
