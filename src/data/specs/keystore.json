{
  "id": "keystore",
  "name": "Keystore API",
  "description": "Every node has a built-in keystore.\nClients create users on the keystore, which act as identities to be used when interacting with blockchains.\nA keystore exists at the node level, so if you create a user on a node it exists *only* on that node.\nHowever, users may be imported and exported using this API.\n\n**You should only create a keystore user on a node that you operate, as the node operator has access to your plaintext password.**\n",
  "methods": [
    {
      "id": "keystore.createUser",
      "endpoint": "/ext/keystore",
      "description": "Create a new user with the specified username and password.",
      "signature": "keystore.createUser({\n    username: string,\n    password: string\n}) -> {\n    success: bool\n}",
      "formals": {
        "username": "string",
        "password": "string"
      },
      "returns": {
        "success": "bool"
      },
      "example": {
        "username": "bob",
        "password": "creme fraiche"
      },
      "notes": [
        "`username` and `password` can be at most 1024 characters.",
        "Your request will be rejected if `password` is too weak. `password` should be at least 8 characters and contain upper and lower case letters as well as numbers and symbols."
      ]
    },
    {
      "id": "keystore.deleteUser",
      "endpoint": "/ext/keystore",
      "description": "Delete a user.",
      "signature": "keystore.deleteUser({\n    username: string,\n    password: string\n}) -> {\n    success: bool\n}",
      "formals": {
        "username": "string",
        "password": "string"
      },
      "returns": {
        "success": "bool"
      },
      "example": {
        "username": "bob",
        "password": "3l33th4x0r!!1!"
      }
    },
    {
      "id": "keystore.exportUser",
      "endpoint": "/ext/keystore",
      "description": "Export a user. The user can be imported to another node with `keystore.importUser`. The user's password remains encrypted.",
      "signature": "keystore.exportUser({\n    username: string,\n    password: string\n}) -> {\n    user: string\n}",
      "formals": {
        "username": "string",
        "password": "string"
      },
      "returns": {
        "user": "string"
      },
      "example": {
        "username": "bob",
        "password": "creme fraiche"
      }
    },
    {
      "id": "keystore.importUser",
      "endpoint": "/ext/keystore",
      "description": "Import a user. `password` must match the user's password. `username` doesn't have to match the username `user` had when it was exported.",
      "signature": "keystore.importUser({\n    username: string,\n    password: string,\n    user: string\n}) -> {\n    success: bool\n}",
      "formals": {
        "username": "string",
        "password": "string",
        "user": "string"
      },
      "returns": {
        "success": "bool"
      },
      "example": {
        "username": "accountNameCanBeDifferent",
        "password": "creme fraiche",
        "user": "4CsUh5sfVwz2jNrJXBVpoPtDsb4tZksWykqmxC5CXoDEERyhoRryq62jYTETYh53y13v7NzeReisi"
      }
    },
    {
      "id": "keystore.listUsers",
      "endpoint": "/ext/keystore",
      "description": "List the users in this keystore.",
      "signature": "keystore.ListUsers() -> {\n    users: []string\n}",
      "returns": {
        "users": "[]string"
      }
    }
  ]
}
